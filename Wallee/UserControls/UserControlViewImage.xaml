<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Wallee.UserControls"
             xmlns:Interactions="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:controlBlackOut="clr-namespace:StyleFluentWpf.CustomControls.ControlBlackOut;assembly=StyleFluentWpf"
             xmlns:utils="clr-namespace:Wallee.Utils"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" x:Class="Wallee.UserControls.UserControlViewImage"
             mc:Ignorable="d" x:Name="UserControlThis"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <utils:ConverterStringLinkToUrl Flag="Regular" x:Key="ConverterStringLinkToUrl" />
        <!--<ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
            <Grid>
                <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                            <Border.Effect>
                                <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <materialDesign:ShadowConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.Effect>
                        </Border>
                        <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}}">
                            <ProgressBar.Visibility>
                                <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <BooleanToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </ProgressBar.Visibility>
                        </ProgressBar>
                    </Grid>
                </AdornerDecorator>
                <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.23"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>-->
    </UserControl.Resources>
    <Grid x:Name="Grid">
        <!--<Interactions:Interaction.Triggers>
            <Interactions:EventTrigger EventName="MouseDown" SourceObject="{Binding ElementName=Grid}">
                <Interactions:InvokeCommandAction Command="{x:Static controlBlackOut:ControlBlackOut.ResetOverlay}" />
            </Interactions:EventTrigger>
        </Interactions:Interaction.Triggers>-->
        <Button Content="X" FontSize="32" Height="42" VerticalContentAlignment="Center" Padding="0"
                Width="42" VerticalAlignment="Top" HorizontalAlignment="Right"
                BorderBrush="Transparent" BorderThickness="0"
                Effect="{x:Null}"
                materialDesign:ShadowAssist.ShadowDepth="Depth0"
                Command="{x:Static controlBlackOut:ControlBlackOut.ResetOverlay}" >
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="Gainsboro"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="#9A434343"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Image Margin="20" VerticalAlignment="Center" HorizontalAlignment="Center"
               Source="{Binding PhotoShow.Urls, Converter={StaticResource ConverterStringLinkToUrl}, ElementName=UserControlThis}" />

        <Button VerticalAlignment="Bottom" HorizontalAlignment="Right" Content="Download"
                Command="{x:Static local:UserControlViewImage.DownloadCommand}">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"/>
            </Button.Style>
        </Button>
    </Grid>
</UserControl>